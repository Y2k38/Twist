#!/bin/bash

# ubuntu 24.04

# 1. prepare
# 1.1. global variables
SSLOCAL="\"0.0.0.0\""
PORT=443
PASSWORD=""
METHOD="xchacha20-ietf-poly1305"
TIMEOUT="1800"
OBFS="tls"
OBFSHOST="mzstatic.com"
OBFSURI="/"
FASTOPEN="true"
REUSEPORT="true"
DNS1="8.8.8.8"
DNS2="8.8.4.4"
DNSv6a="2001:4860:4860::8888"
DNSv6b="2001:4860:4860::8844"
DSCP="EF"
MODE="tcp_and_udp"
MTU=""
MPTCP="false"
IPV6FIRST="false"
SYSLOG="true"
NODELAY="true"
FWS="enable"
BBR="enable"

ETH=""
PUBLICIP=""
IPREGEX="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"

# 1.2. backup folder
[ -d /etc/twist ] || mkdir -p /etc/twist

# 1.3. password generate
[ -z "$PASSWORD" ] && PASSWORD="$(< /dev/urandom tr -dc 'A-HJ-NPR-Za-km-z2-9-._+?%^&*()' | head -c 8)"

# 1.4. network interface
[ -z "$ETH" ] && ETH="$(ip -4 route list 0/0 | grep -Po '(?<=dev )(\S+)')"

# 1.5. public ip
[ -z "$PUBLICIP" ] && PUBLICIP="$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)"

# 1.6. dns
DNS="${DNS1},${DNS2}"

# 1.7. mtu
[ -z "$MTU" ] && MTU="$(cat /sys/class/net/${ETH}/mtu)"
[ -z "$MTU" ] && MTU="1492"

# 2. install shadowsocks and dependencies
apt update && \
    apt install -yq apache2 fail2ban shadowsocks-libev simple-obfs libsodium-dev libmbedtls-dev libcork-dev python3-qrcode python3-m2crypto && \
    rm -rf /var/cache/apt/archives /var/lib/apt/lists/*

# 3. server config
# 3.1. override shadowsocks's config
cat > /etc/shadowsocks-libev/config.json <<-EOF
{
    "server":${SSLOCAL},
    "server_port":${PORT},
    "password":"${PASSWORD}",
    "method":"${METHOD}",
    "timeout":${TIMEOUT},
    "udp_timeout":${TIMEOUT},
    "plugin":"obfs-server",
    "plugin_opts":"obfs=${OBFS};${OBFSTFO}${OBFSLOCAL}=${OBFSHOST}:${PORT}${OBFSURL}",
    "fast_open":${FASTOPEN},
    "reuse_port":${REUSEPORT},
    "nofile":512000,
    "nameserver":"${DNS}",
    "dscp":"${DSCP}",
    "mode":"${MODE}",
    "mtu":${MTU},
    "mptcp":${MPTCP},
    "ipv6_first":${IPV6FIRST},
    "use_syslog":${SYSLOG},
    "no_delay":${NODELAY}
}
EOF

# the real config file(shadowsocks-libev+simple-obfs)
cp /etc/shadowsocks-libev/config.json /etc/shadowsocks-libev/config-obfs.json

# 3.2. sysctl(network/open files)
cat >> /etc/sysctl.conf <<-EOF
Twist

fs.file-max = 512000
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.core.netdev_max_backlog = 256000
net.core.somaxconn = 4096
net.ipv4.udp_mem = 25600 51200 102400
net.ipv4.tcp_mem = 25600 51200 102400
net.ipv4.tcp_rmem = 4096 87380 67108864
net.ipv4.tcp_wmem = 4096 65536 67108864
net.ipv4.ip_local_port_range = 49152 65535
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 4096
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control=bbr
net.ipv4.ip_forward = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fwmark_accept = 1
net.ipv4.tcp_stdurg = 1
net.ipv4.tcp_synack_retries = 30
net.ipv4.tcp_syn_retries = 30
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_fin_timeout = 60
net.ipv4.tcp_keepalive_time = ${TIMEOUT}
net.ipv4.tcp_mtu_probing = 2
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_low_latency = 1
net.ipv4.udp_l3mdev_accept = 1
net.ipv4.fib_multipath_hash_policy = 1
net.ipv4.fib_multipath_use_neigh = 1
net.ipv4.cipso_rbm_optfmt = 1
net.ipv4.fwmark_reflect = 1
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.all.send_redirects = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.all.arp_accept = 1
net.ipv4.conf.all.arp_announce = 1
net.ipv4.conf.all.proxy_arp = 1
net.ipv4.conf.all.proxy_arp_pvlan = 1
net.ipv4.conf.all.mc_forwarding = 1
net.ipv6.conf.all.forwarding = 1
net.ipv6.conf.all.accept_source_route = 1
net.ipv6.conf.all.accept_redirects = 1
net.ipv6.conf.all.autoconf = 1
net.ipv6.conf.all.accept_ra = 2
net.ipv6.conf.all.seg6_enabled = 1

EOF

# 3.3. open file limit
echo "*                soft    nofile          512000" >> /etc/security/limits.conf
echo "*                hard    nofile          512000" >> /etc/security/limits.conf
echo "" >> /etc/security/limits.conf

# 3.4. dns
echo "" > /etc/resolv.conf
echo "nameserver ${DNS1}" >> /etc/resolv.conf
echo "nameserver ${DNS2}" >> /etc/resolv.conf
echo "" >> /etc/resolv.conf

# 3.5. nftables
cp "/etc/nftables.conf" "/etc/twist/nftables.conf.$(date +%Y%m%d%H%M%S)"

if [ -f "/usr/sbin/iptables-nft" ]; then
    iptables-nft -I INPUT -m conntrack --ctstate INVALID -j DROP
    iptables-nft -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    iptables-nft -I INPUT -p tcp -m multiport --dports ${PORT} -j ACCEPT
    iptables-nft -I INPUT -p udp -m multiport --dports ${PORT} -j ACCEPT
    iptables-nft -I INPUT -m state --state NEW -m tcp -p tcp --dport ${PORT} -j ACCEPT
    iptables-nft -I INPUT -m state --state NEW -m udp -p udp --dport ${PORT} -j ACCEPT
    iptables-nft -I FORWARD -m conntrack --ctstate INVALID -j DROP
    iptables-nft -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
    iptables-nft -t nat -A POSTROUTING -o "$ETH" -j MASQUERADE
else
    nft "insert rule ip filter INPUT ct state invalid counter drop"
    nft "insert rule ip filter INPUT ct state related,established counter accept"
    nft "insert rule ip filter INPUT ip protocol tcp tcp dport ${PORT} counter accept"
    nft "insert rule ip filter INPUT ip protocol udp udp dport ${PORT} counter accept"
    nft "insert rule ip filter INPUT ct state new tcp dport ${PORT} counter accept"
    nft "insert rule ip filter INPUT ct state new udp dport ${PORT} counter accept"
    nft "insert rule ip filter FORWARD ct state invalid counter drop"
    nft "insert rule ip filter FORWARD tcp flags syn / syn,rst counter tcp option maxseg size set rt mtu"
    nft "add rule ip nat POSTROUTING oifname \"$ETH\" counter masquerade"
fi

nft list ruleset > /etc/nftables.conf

# 3.6. apache
if [ "$FWS" = "enable" ]; then
    cat > /var/www/html/.htaccess <<-EOF
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule (.*) http://mzstatic.com/$1 [R=301,L]
</IfModule>
EOF

    cat > /var/www/html/index.html <<-EOF
<head><meta http-equiv="refresh" content="0;url=http://mzstatic.com"></head>
EOF
fi

# 4. start server
systemctl enable fail2ban apache2 shadowsocks-libev
systemctl restart fail2ban apache2 shadowsocks-libev

# 5. print installed message
echo "ss://$(echo -n "${METHOD}:${PASSWORD}@${PUBLICIP}:${PORT}?plugin=obfs-local;obfs-host=${OBFSHOST};obfs-uri=${OBFSURI};obfs=${OBFS}#Twist" | base64 -w 0)" | qr
echo -e "# [\033[32;1mss://\033[0m\033[34;1m$(echo -n "${METHOD}:${PASSWORD}@${PUBLICIP}:${PORT}?plugin=obfs-local;obfs-host=${OBFSHOST};obfs-uri=${OBFSURI};obfs=${OBFS}#Twist" | base64 -w 0)\033[0m]"
echo -e "# [\033[32;1mServer IP:\033[0m \033[34;1m${PUBLICIP}\033[0m\c"
echo -e " \033[32;1mPassWord:\033[0m \033[34;1m${PASSWORD}\033[0m \033[32;1mEncryption:\033[0m \033[34;1m${METHOD}\033[0m \033[32;1mOBFS:\033[0m \033[34;1m${OBFS}\033[0m \033[32;1mOBFS-HOST:\033[0m \033[34;1m${OBFSHOST}\033[0m \033[32;1mOBFS-URI:\033[0m \033[34;1m${OBFSURI}\033[0m]"
